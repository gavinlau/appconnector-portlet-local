/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.wits.portal.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.wits.portal.model.Connector;
import com.wits.portal.model.ConnectorModel;
import com.wits.portal.model.ConnectorSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Connector service. Represents a row in the &quot;AppConnectorNS_Connector&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.wits.portal.model.ConnectorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConnectorImpl}.
 * </p>
 *
 * @author Administrator
 * @see ConnectorImpl
 * @see com.wits.portal.model.Connector
 * @see com.wits.portal.model.ConnectorModel
 * @generated
 */
@JSON(strict = true)
public class ConnectorModelImpl extends BaseModelImpl<Connector>
	implements ConnectorModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a connector model instance should use the {@link com.wits.portal.model.Connector} interface instead.
	 */
	public static final String TABLE_NAME = "AppConnectorNS_Connector";
	public static final Object[][] TABLE_COLUMNS = {
			{ "connectorId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "comanyName", Types.VARCHAR },
			{ "type_", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "versionCode", Types.VARCHAR },
			{ "versionName", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "updateLog", Types.VARCHAR },
			{ "remark", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table AppConnectorNS_Connector (connectorId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,comanyName VARCHAR(75) null,type_ VARCHAR(75) null,name VARCHAR(75) null,versionCode VARCHAR(75) null,versionName VARCHAR(75) null,url VARCHAR(75) null,status INTEGER,updateLog VARCHAR(75) null,remark VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table AppConnectorNS_Connector";
	public static final String ORDER_BY_JPQL = " ORDER BY connector.comanyName ASC, connector.type ASC, connector.status ASC";
	public static final String ORDER_BY_SQL = " ORDER BY AppConnectorNS_Connector.comanyName ASC, AppConnectorNS_Connector.type_ ASC, AppConnectorNS_Connector.status ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.wits.portal.model.Connector"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.wits.portal.model.Connector"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.wits.portal.model.Connector"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long STATUS_COLUMN_BITMASK = 4L;
	public static long COMANYNAME_COLUMN_BITMASK = 8L;
	public static long TYPE_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Connector toModel(ConnectorSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Connector model = new ConnectorImpl();

		model.setConnectorId(soapModel.getConnectorId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setComanyName(soapModel.getComanyName());
		model.setType(soapModel.getType());
		model.setName(soapModel.getName());
		model.setVersionCode(soapModel.getVersionCode());
		model.setVersionName(soapModel.getVersionName());
		model.setUrl(soapModel.getUrl());
		model.setStatus(soapModel.getStatus());
		model.setUpdateLog(soapModel.getUpdateLog());
		model.setRemark(soapModel.getRemark());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Connector> toModels(ConnectorSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Connector> models = new ArrayList<Connector>(soapModels.length);

		for (ConnectorSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.wits.portal.model.Connector"));

	public ConnectorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _connectorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setConnectorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _connectorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Connector.class;
	}

	@Override
	public String getModelClassName() {
		return Connector.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("connectorId", getConnectorId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("comanyName", getComanyName());
		attributes.put("type", getType());
		attributes.put("name", getName());
		attributes.put("versionCode", getVersionCode());
		attributes.put("versionName", getVersionName());
		attributes.put("url", getUrl());
		attributes.put("status", getStatus());
		attributes.put("updateLog", getUpdateLog());
		attributes.put("remark", getRemark());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long connectorId = (Long)attributes.get("connectorId");

		if (connectorId != null) {
			setConnectorId(connectorId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String comanyName = (String)attributes.get("comanyName");

		if (comanyName != null) {
			setComanyName(comanyName);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String versionCode = (String)attributes.get("versionCode");

		if (versionCode != null) {
			setVersionCode(versionCode);
		}

		String versionName = (String)attributes.get("versionName");

		if (versionName != null) {
			setVersionName(versionName);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String updateLog = (String)attributes.get("updateLog");

		if (updateLog != null) {
			setUpdateLog(updateLog);
		}

		String remark = (String)attributes.get("remark");

		if (remark != null) {
			setRemark(remark);
		}
	}

	@JSON
	@Override
	public long getConnectorId() {
		return _connectorId;
	}

	@Override
	public void setConnectorId(long connectorId) {
		_connectorId = connectorId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getComanyName() {
		if (_comanyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _comanyName;
		}
	}

	@Override
	public void setComanyName(String comanyName) {
		_columnBitmask = -1L;

		_comanyName = comanyName;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_columnBitmask = -1L;

		_type = type;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getVersionCode() {
		if (_versionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _versionCode;
		}
	}

	@Override
	public void setVersionCode(String versionCode) {
		_versionCode = versionCode;
	}

	@JSON
	@Override
	public String getVersionName() {
		if (_versionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _versionName;
		}
	}

	@Override
	public void setVersionName(String versionName) {
		_versionName = versionName;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask = -1L;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public String getUpdateLog() {
		if (_updateLog == null) {
			return StringPool.BLANK;
		}
		else {
			return _updateLog;
		}
	}

	@Override
	public void setUpdateLog(String updateLog) {
		_updateLog = updateLog;
	}

	@JSON
	@Override
	public String getRemark() {
		if (_remark == null) {
			return StringPool.BLANK;
		}
		else {
			return _remark;
		}
	}

	@Override
	public void setRemark(String remark) {
		_remark = remark;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Connector.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Connector toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Connector)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ConnectorImpl connectorImpl = new ConnectorImpl();

		connectorImpl.setConnectorId(getConnectorId());
		connectorImpl.setGroupId(getGroupId());
		connectorImpl.setCompanyId(getCompanyId());
		connectorImpl.setUserId(getUserId());
		connectorImpl.setUserName(getUserName());
		connectorImpl.setCreateDate(getCreateDate());
		connectorImpl.setModifiedDate(getModifiedDate());
		connectorImpl.setComanyName(getComanyName());
		connectorImpl.setType(getType());
		connectorImpl.setName(getName());
		connectorImpl.setVersionCode(getVersionCode());
		connectorImpl.setVersionName(getVersionName());
		connectorImpl.setUrl(getUrl());
		connectorImpl.setStatus(getStatus());
		connectorImpl.setUpdateLog(getUpdateLog());
		connectorImpl.setRemark(getRemark());

		connectorImpl.resetOriginalValues();

		return connectorImpl;
	}

	@Override
	public int compareTo(Connector connector) {
		int value = 0;

		value = getComanyName().compareTo(connector.getComanyName());

		if (value != 0) {
			return value;
		}

		value = getType().compareTo(connector.getType());

		if (value != 0) {
			return value;
		}

		if (getStatus() < connector.getStatus()) {
			value = -1;
		}
		else if (getStatus() > connector.getStatus()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Connector)) {
			return false;
		}

		Connector connector = (Connector)obj;

		long primaryKey = connector.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ConnectorModelImpl connectorModelImpl = this;

		connectorModelImpl._originalGroupId = connectorModelImpl._groupId;

		connectorModelImpl._setOriginalGroupId = false;

		connectorModelImpl._originalCompanyId = connectorModelImpl._companyId;

		connectorModelImpl._setOriginalCompanyId = false;

		connectorModelImpl._originalStatus = connectorModelImpl._status;

		connectorModelImpl._setOriginalStatus = false;

		connectorModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Connector> toCacheModel() {
		ConnectorCacheModel connectorCacheModel = new ConnectorCacheModel();

		connectorCacheModel.connectorId = getConnectorId();

		connectorCacheModel.groupId = getGroupId();

		connectorCacheModel.companyId = getCompanyId();

		connectorCacheModel.userId = getUserId();

		connectorCacheModel.userName = getUserName();

		String userName = connectorCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			connectorCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			connectorCacheModel.createDate = createDate.getTime();
		}
		else {
			connectorCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			connectorCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			connectorCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		connectorCacheModel.comanyName = getComanyName();

		String comanyName = connectorCacheModel.comanyName;

		if ((comanyName != null) && (comanyName.length() == 0)) {
			connectorCacheModel.comanyName = null;
		}

		connectorCacheModel.type = getType();

		String type = connectorCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			connectorCacheModel.type = null;
		}

		connectorCacheModel.name = getName();

		String name = connectorCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			connectorCacheModel.name = null;
		}

		connectorCacheModel.versionCode = getVersionCode();

		String versionCode = connectorCacheModel.versionCode;

		if ((versionCode != null) && (versionCode.length() == 0)) {
			connectorCacheModel.versionCode = null;
		}

		connectorCacheModel.versionName = getVersionName();

		String versionName = connectorCacheModel.versionName;

		if ((versionName != null) && (versionName.length() == 0)) {
			connectorCacheModel.versionName = null;
		}

		connectorCacheModel.url = getUrl();

		String url = connectorCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			connectorCacheModel.url = null;
		}

		connectorCacheModel.status = getStatus();

		connectorCacheModel.updateLog = getUpdateLog();

		String updateLog = connectorCacheModel.updateLog;

		if ((updateLog != null) && (updateLog.length() == 0)) {
			connectorCacheModel.updateLog = null;
		}

		connectorCacheModel.remark = getRemark();

		String remark = connectorCacheModel.remark;

		if ((remark != null) && (remark.length() == 0)) {
			connectorCacheModel.remark = null;
		}

		return connectorCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{connectorId=");
		sb.append(getConnectorId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", comanyName=");
		sb.append(getComanyName());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", versionCode=");
		sb.append(getVersionCode());
		sb.append(", versionName=");
		sb.append(getVersionName());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", updateLog=");
		sb.append(getUpdateLog());
		sb.append(", remark=");
		sb.append(getRemark());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.wits.portal.model.Connector");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>connectorId</column-name><column-value><![CDATA[");
		sb.append(getConnectorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comanyName</column-name><column-value><![CDATA[");
		sb.append(getComanyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionCode</column-name><column-value><![CDATA[");
		sb.append(getVersionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionName</column-name><column-value><![CDATA[");
		sb.append(getVersionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateLog</column-name><column-value><![CDATA[");
		sb.append(getUpdateLog());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remark</column-name><column-value><![CDATA[");
		sb.append(getRemark());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Connector.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Connector.class
		};
	private long _connectorId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _comanyName;
	private String _type;
	private String _name;
	private String _versionCode;
	private String _versionName;
	private String _url;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private String _updateLog;
	private String _remark;
	private long _columnBitmask;
	private Connector _escapedModel;
}